PipedStream源码分析:

PipedStream的作用:
1、让多线程可以通过管道进行线程间的通讯。在使用管道通信时，必须将PipedOutputStream和PipedInputStream配套使用。

管道通信的流程:
1、在线程A中向PipedOutputStream中写入数据，这些数据会自动的发送到对应的PipedInputStream中，进而存储在PipedInputStream的缓存中。
2、在线程B中通过读取PipedInputStream中的数据。就可以实现，线程A和线程B的通信。

PipedOutputStream源码:

package java.io;

import java.io.*;

public class PipedOutputStream extends OutputStream {

    // 与PipedOutputStream通信的PipedInputStream对象
    private PipedInputStream sink;

    // 构造函数，指定配对的PipedInputStream
    public PipedOutputStream(PipedInputStream snk)  throws IOException {
        connect(snk);
    }

    // 构造函数
    public PipedOutputStream() {
    }

    // 将“管道输出流” 和 “管道输入流”连接。
    public synchronized void connect(PipedInputStream snk) throws IOException {
        if (snk == null) {
            // 如果输入流为空，报空指针异常
            throw new NullPointerException();
        } else if (sink != null || snk.connected) {
            // 如果已经连接其他输入流或者要连接的输入流已经和其他流连接
            throw new IOException("Already connected");
        }
        // 设置“管道输入流”
        sink = snk;
        // 初始化“管道输入流”的读写位置
        // in是PipedInputStream中定义的，代表“管道输入流”的读写位置
        snk.in = -1;
        // 初始化“管道输出流”的读写位置。
        // out是PipedInputStream中定义的，代表“管道输出流”的读写位置
        snk.out = 0;
        // 设置“管道输入流”和“管道输出流”为已连接状态
        // connected是PipedInputStream中定义的，用于表示“管道输入流与管道输出流”是否已经连接
        snk.connected = true;
    }

    // 将int类型b写入“管道输出流”中。
    // 将b写入“管道输出流”之后，它会将b传输给“管道输入流”
    public void write(int b)  throws IOException {
        if (sink == null) {
            // 如果和自己连接的输入流为空，报IO异常
            throw new IOException("Pipe not connected");
        }
        // 正常情况下，调用输入流的receive方法来接收字节b
        sink.receive(b);
    }

    // 将字节数组b写入“管道输出流”中。
    // 将数组b写入“管道输出流”之后，它会将其传输给“管道输入流”
    public void write(byte b[], int off, int len) throws IOException {
        if (sink == null) {
            throw new IOException("Pipe not connected");
        } else if (b == null) {
            throw new NullPointerException();
        } else if ((off < 0) || (off > b.length) || (len < 0) ||
                   ((off + len) > b.length) || ((off + len) < 0)) {
            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return;
        }
        // “管道输入流”接收数据
        sink.receive(b, off, len);
    }

    // 清空“管道输出流”。
    // 这里会调用“管道输入流”的notifyAll()；
    // 目的是让“管道输入流”放弃对当前资源的占有，让其它的等待线程(等待读取管道输出流的线程)读取“管道输出流”的值。
    public synchronized void flush() throws IOException {
        if (sink != null) {
            synchronized (sink) {
                sink.notifyAll();
            }
        }
    }

    // 关闭“管道输出流”。
    // 关闭之后，会调用receivedLast()通知“管道输入流”它已经关闭。
    public void close()  throws IOException {
        if (sink != null) {
            sink.receivedLast();
        }
    }
}



PipedInputStream源码:

public class PipedInputStream extends InputStream {
    // “管道输出流”是否关闭的标记
    boolean closedByWriter = false;
    // “管道输入流”是否关闭的标记
    volatile boolean closedByReader = false;
    // “管道输入流”与“管道输出流”是否连接的标记
    // 它在PipedOutputStream的connect()连接函数中被设置为true
    boolean connected = false;

    Thread readSide;    // 读取“管道”数据的线程
    Thread writeSide;    // 向“管道”写入数据的线程

    // “管道”的默认大小
    private static final int DEFAULT_PIPE_SIZE = 1024;

    protected static final int PIPE_SIZE = DEFAULT_PIPE_SIZE;

    // 缓冲区
    // 管道输入与输出实际上使用的是一个循环缓冲数组来实现，这个数组默认大小为1024字节。
    // 输入流PipedInputStream从这个循环缓冲数组中读数据，输出流PipedOutputStream往这个循环缓冲数组中写入数据。
    // 当这个缓冲数组已满的时候，输出流PipedOutputStream所在的线程将阻塞；当这个缓冲数组首次为空的时候，输入流PipedInputStream所在的线程将阻塞。
    protected byte buffer[];

    /*代表连接该管道输入流的输出流PipedOutputStream下一个字节将存储在循环缓冲数组buffer的位置。当in<0说明缓冲数组是空的;当in==out说明缓冲数组已满。*/
    protected int in = -1;
    //下一个读取字节的位置。in==out代表满，说明“写入的数据”全部被读取了。
    protected int out = 0;

    // 构造函数：指定与“管道输入流”关联的“管道输出流”
    public PipedInputStream(PipedOutputStream src) throws IOException {
        this(src, DEFAULT_PIPE_SIZE);
    }

    // 构造函数：指定与“管道输入流”关联的“管道输出流”，以及“缓冲区大小”
    public PipedInputStream(PipedOutputStream src, int pipeSize)
            throws IOException {
         initPipe(pipeSize);
         connect(src);
    }

    // 构造函数：默认缓冲区大小是1024字节
    public PipedInputStream() {
        initPipe(DEFAULT_PIPE_SIZE);
    }

    // 构造函数：指定缓冲区大小是pipeSize
    public PipedInputStream(int pipeSize) {
        initPipe(pipeSize);
    }

    // 初始化“管道”：新建缓冲区大小
    private void initPipe(int pipeSize) {
         if (pipeSize <= 0) {
            throw new IllegalArgumentException("Pipe Size <= 0");
         }
         buffer = new byte[pipeSize];
    }

    // 将“管道输入流”和“管道输出流”绑定。
    // 实际上，这里调用的是PipedOutputStream的connect()函数
    public void connect(PipedOutputStream src) throws IOException {
        src.connect(this);
    }

    // 接收int类型的数据b。
    // 它只会在PipedOutputStream的write(int b)中会被调用
    // 这个方法是一个同步方法，也就是说当在一个PipedInputStream对象上调用其receive方法时，该对象所在的线程必须先获得这个PipedInputStream对象的锁，才能进入该方法。
    protected synchronized void receive(int b) throws IOException {
        // 检查管道状态
        checkStateForReceive();
        // 获取“写入管道”的线程
        // 将当前线程保存至成员变量 writeSide，即表示管道输出流所在的线程
        writeSide = Thread.currentThread();
        // 若“写入管道”的数据正好全部被读取完，则等待。
        if (in == out)
            // 这个方法会一直阻塞在这里，直到in和out不相等才跳出
            awaitSpace();
        // 如果in小于0，将in和out都置为0，此后可以开始写入数据
        if (in < 0) {
            in = 0;
            out = 0;
        }
        // in下标处存入当前的字节，之后将in后移一位
        buffer[in++] = (byte)(b & 0xFF);
        // 如果in超过了缓冲数组长度，将其置为0，从头开始
        if (in >= buffer.length) {
            in = 0;
        }
    }

    // 接收字节数组b。
    synchronized void receive(byte b[], int off, int len)  throws IOException {
        // 检查管道状态
        checkStateForReceive();
        // 获取“写入管道”的线程
        writeSide = Thread.currentThread();
        // 需要传输的字节总数
        int bytesToTransfer = len;
        // 只要传输的字节数大于0就一直循环
        while (bytesToTransfer > 0) {
            // 若“写入管道”的数据正好全部被读取完，则等待。
            if (in == out)
                awaitSpace();
                // 可以写入的数据量
            int nextTransferAmount = 0;
            // 如果out<in，说明in到数组最后的字节位置这中间的都可用
            if (out < in) {
                nextTransferAmount = buffer.length - in;
            } else if (in < out) { // 如果“管道中被读取的数据，大于/等于写入管道的数据”，则执行后面的操作
                // 如果in为-1说明还未开始写入
                if (in == -1) {
                    in = out = 0;
                    // 下面传输字节数量为总长度
                    nextTransferAmount = buffer.length - in;
                } else {
                    nextTransferAmount = out - in;
                }
            }
            // A:如果可用的字节数量大于需要传入的字节数量，那么就可以传入这些字节
            // B:如果可用的字节数不够，那么先复制这么多数量的
            if (nextTransferAmount > bytesToTransfer)
                nextTransferAmount = bytesToTransfer;
            // assert断言的作用是，若nextTransferAmount <= 0，则终止程序。
            assert(nextTransferAmount > 0);
            // 数组的复制，将b数组从off下标开始复制目标个数，到buffer数组的in下标处
            System.arraycopy(b, off, buffer, in, nextTransferAmount);
            // 对应上边A情况，位置充足，这里全部复制了，那么剩余需要传输的字节为0
            // 对应上边B情况，位置不够，剩余未复制的数量就是两者只差
            bytesToTransfer -= nextTransferAmount;
            // b数组的off下标后移写入的元素个数
            off += nextTransferAmount;
            // in下标也要后移写入的元素个数
            in += nextTransferAmount;
            // 如果in到了最后，就置为0，从0开始
            if (in >= buffer.length) {
                in = 0;
            }
        }
    }

    // 检查管道状态
    private void checkStateForReceive() throws IOException {
        if (!connected) {
            throw new IOException("Pipe not connected");
        } else if (closedByWriter || closedByReader) {
            throw new IOException("Pipe closed");
        } else if (readSide != null && !readSide.isAlive()) {
            // 这里的readSide != null && !readSide.isAlive() 如果管道输入流所在的线程不为空但是线程已死(之前的管道输入流所在的线程已死)，则会抛出异常。
            throw new IOException("Read end dead");
        }
    }

    // 等待。
    // 若“写入管道”的数据正好全部被读取完(例如，管道缓冲满)，则执行awaitSpace()操作；
    // 它的目的是让“读取管道的线程”管道产生读取数据请求，从而才能继续的向“管道”中写入数据。
    private void awaitSpace() throws IOException {

        // 如果“管道中被读取的数据，等于写入管道的数据”时，
        // 则每隔1000ms检查“管道状态”，并唤醒管道操作：若有“读取管道数据线程被阻塞”，则唤醒该线程。
        while (in == out) {
            checkStateForReceive();

            // 当前线程交出输入流的对象锁，等待一秒
            // 目的是让其他线程能使用该输入流对象向外读取数据，从而out后移，腾出空间
            notifyAll();
            try {
                wait(1000);
            } catch (InterruptedException ex) {
                throw new java.io.InterruptedIOException();
            }
        }
    }

    // 当PipedOutputStream被关闭时，被调用
    synchronized void receivedLast() {
        closedByWriter = true;
        notifyAll();
    }

    // 从管道(的缓冲)中读取一个字节，并将其转换成int类型
    public synchronized int read()  throws IOException {
        if (!connected) {
            throw new IOException("Pipe not connected");
        } else if (closedByReader) {
            throw new IOException("Pipe closed");
        } else if (writeSide != null && !writeSide.isAlive()
                   && !closedByWriter && (in < 0)) {
            // 如果管道输出流所在的线程不为空但是线程已死并且缓冲区没有数据则抛出异常，这和checkStateForReceive()方法中的readSide != null && !readSide.isAlive() 是类似的
            // 当首次使用管道输出流PipedOutputStream对象的write方法写数据后，该输出流连接的输入流PipedInputStream的成员变量writeSide便不为null;
            // 当首次使用管道输入流PipedInputStream对象的read方法读数据后，成员变量readSide便不为null, 注意readSide和writeSide均为PipedInputStream类的成员变量。
            // 假设管道输入流所在的线程A与管道输出流所在的线程B建立了连接，当B写完数据后终止，这时A去读数据不会出错，
            // 但是当A再次去读取数据的时候，如果缓冲区没有数据(即缓冲区为空)同时由于线程B已经死亡，这时便会报错，
            throw new IOException("Write end dead");
        }
        // 当前的线程是读取线程
        readSide = Thread.currentThread();
        // 两次尝试次数
        int trials = 2;
        // in<0说明还未写入数据，一直循环直到跳出
        while (in < 0) {
            if (closedByWriter) {
                 // 如果输出流关闭了，返回-1，没有读到字节
                return -1;
            }
            // 如果写线程不为空，而且写线程不在可用状态，同时尝试次数小于0，就抛出IO异常
            if ((writeSide != null) && (!writeSide.isAlive()) && (--trials < 0)) {
                throw new IOException("Pipe broken");
            }
            // 交出流对象锁，给写入线程进行写入缓冲数组
            notifyAll();
            try {
                wait(1000);
            } catch (InterruptedException ex) {
                throw new java.io.InterruptedIOException();
            }
        }
        // 读取下标out位置的一个字节作为int返回
        // out向后移动一个位置
        int ret = buffer[out++] & 0xFF;
        // out加1后，如果超出了缓冲数组的最后一个位置，那么将其置0，从下标0处开始
        if (out >= buffer.length) {
            out = 0;
        }
        // 如果输入的位置和读取位置下标重合，说明缓冲数组为空，in置为-1
        if (in == out) {
            /* now empty */
            in = -1;
        }
        // 返回读取的字节，作为int返回
        return ret;
    }

    // 从管道(的缓冲)中读取数据，并将其存入到数组b中
    public synchronized int read(byte b[], int off, int len)  throws IOException {
        if (b == null) {
            throw new NullPointerException();
        } else if (off < 0 || len < 0 || len > b.length - off) {
            throw new IndexOutOfBoundsException();
        } else if (len == 0) {
            return 0;
        }

        // 在读取一个数组大小的数据时，read方法先读取了一个字节的数据，这是通过其另一个重载版本的无参read()方法实现
        // 原因: 为什么要先读一个字节?
        // 当输入流去读数据的时候此时循环数组中没有数据时输入流便阻塞
        // 因此read(byte b[], int off, int len)调用read()先读一个字节就是为了当缓冲区没有数据的时候，输入流所在的线程能够阻塞
        // 在read()方法里有个循环不停的判断in是否小于0，同时在循环里调用notifyAll()来唤醒那些被阻塞的输出流线程。
        int c = read();
        if (c < 0) {
            return -1;
        }
        b[off] = (byte) c;
        int rlen = 1;
        while ((in >= 0) && (len > 1)) {

            int available;

            if (in > out) {
                available = Math.min((buffer.length - out), (in - out));
            } else {
                available = buffer.length - out;
            }

            // A byte is read beforehand outside the loop
            if (available > (len - 1)) {
                available = len - 1;
            }
            System.arraycopy(buffer, out, b, off + rlen, available);
            out += available;
            rlen += available;
            len -= available;

            if (out >= buffer.length) {
                out = 0;
            }
            if (in == out) {
                /* now empty */
                in = -1;
            }
        }
        return rlen;
    }

    // 返回不受阻塞地从此输入流中读取的字节数。
    public synchronized int available() throws IOException {
        if(in < 0)
        // 如果in小于0，数组中没有字节，返回0
            return 0;
        else if(in == out)
         // 如果in和out重合，说明已经满了，整个数组的字节都是可读的
            return buffer.length;
        else if (in > out)
        // 如果in大于out，那么二者之间的字节就是可读的(in下标处此时无字节)
            return in - out;
        else
         // 如果out大于in，说明in到了末尾又从0开始继续写入了，那么二者之间的数量
         // 就是out到数组末位这一部分，加上从0到in下标的部分，两部分相加
         // ((in-1)-0+1)  +  ((buffer.length-1)-out+1)
         // 注意in下标处此时无可用字节
            return in + buffer.length - out;
    }

    // 关闭管道输入流
    public void close()  throws IOException {
        closedByReader = true;
        // 取得输入流对象锁，将in下标置为-1
        synchronized (this) {
            in = -1;
        }
    }
}