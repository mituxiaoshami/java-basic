线程发展的过程:

                                    物理内存

  进程(一个进程里有多个线程)     进程(一个进程里有多个线程)      进程(一个进程里有多个线程)


                                   os 线程调度


                      cpu core                      cpu  core


 1、在计算机没有出现之前， 大量计算都是通过人工  耗费大量人力  而且容易出错

 2、出现第一台计算机， 接受一些指令  识别这些指令之后 做出一些操作  (用户输入指令即可)

 3、此时 计算机处理指令是串行的，在处理一个指令的时候 可能有些I/O操作 此时 指令处于阻塞(等待)状态  而其他的指令是没有办法执行的  所以浪费了cpu资源(宝贵资源)

 4、为了解决这个问题，出现了cpu切换  也就是说当指令处于阻塞(等待)时 去执行其他指令
    这样做有很多问题:
    1) 当前指令执行到哪个位置了 下次切换回来的时候要恢复到哪个位置(寄存器变量、内存地址等等来解决)

 5、如果每个指令都是独立的话 那么就需要在物理内存中开辟一个个独立的内存空间(而这一个个开辟出来的内存空间就是进程，一个个指令可以看做是一个个程序  程序与程序之间独立)

 6、进程解决了程序的切换(指令的切换)------进程的出现   (提高了cpu资源利用率)

 7、同时可以运行多个进程 进程间通过cpu切换 (cpu切换方式有 时间片切换 优先级队列 多级队列 等等)

 8、但是，并发是相对于用户来说的  对于操作系统来说 是一个伪并发(因为cpu同一时间只能运行一个进程) 只是切换时间特别快 用户看上去像同时运行程序。

 9、如果一个进程里面(也就是一个程序里面)，有多个任务同时执行的话，但是在进程中，多个任务是串行执行，所以会有延迟等待的过程。

 10、为了解决这个问题，提出了线程这个概念，把一个任务分配给一个线程。

 11、而线程是cpu调度的最小执行单元，如果是单核的情况下，也达不到并发  只是把执行单元从进程到线程(轻量化) 这样做的目的可以让切换速率变快(快速切换) 提升cpu利用效率
     (线程就是轻量级的进程)

 12、而多核cpu的出现，那么能够达到真正意义上的并发 (同一时刻可以处理多个线程)

 (最终的目的是为了 cpu的利用率 线程开销小、比较好创建、比较好销毁 所以轻量级对cpu执行来说比较好处理切换等等)
  注意: 线程不是越多越好 因为cpu的切换也要消耗时间





